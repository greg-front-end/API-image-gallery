/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./index.js":
/*!******************!*\
  !*** ./index.js ***!
  \******************/
/***/ (() => {

eval("\nwindow.addEventListener('DOMContentLoaded', () => {\n  \n  // After request from UNSPLASH API in the variable will be data of images\n  let dataImages = null;\n\n  // Here will be index of image which we want open in popup for full size\n  let currentImage = 0;\n\n  // API KEY and URL \n  const api_key = \"BQliXLvTM6CoS-kxmE7UZkTWHh1Xd4XIeRMf1IOkWcM\",\n        RANDOM_PHOTO_URL = `https://api.unsplash.com/photos/random?client_id=${api_key}&count=20`\n     \n  const galleryInner = document.querySelector('.gallery__inner'),\n        notFoundPopup = document.querySelector('.gallery__not-found'),\n        form = document.querySelector('.form'),\n        formSearch = document.querySelector('.form__search'),\n        formResetBtn = document.querySelector('.form__btn-reset');\n\n\n  // Render card from data which get from api\n  const creatCardImages = (dataImgs) => {\n    dataImgs.forEach((item, index) => {\n      const card = document.createElement('div');\n      card.classList.add('gallery__card')\n      card.innerHTML = `\n      <img class=\"gallery__card-img\" src=\"${item.urls.regular}\" alt=\"Image\">\n      <div class=\"gallery__img-info\">\n      <a class=\"gallery__author-link\" href=\"${item.user.links.html}\" title=\"author page\">\n      <img class=\"gallery__author-img\" src=\"${item.user.profile_image.medium}\" alt=\"Avatar\">\n      </a>\n      <h6 class=\"gallery__author-name\" title=\"Author name\">${item.user.name}</h6>\n      </div>      \n      `\n      galleryInner.appendChild(card)\n\n      // Create image for popup full image\n      card.addEventListener('click', () => {\n         currentImage = index\n         showImagePopup(item)\n      })\n    })\n  }\n\n  // Show popup with full size image when click on image\n  const showImagePopup = (item) => {\n    let popup = document.querySelector('.image-popup')\n\n    const downloadBtn = document.querySelector('.image-popup__download-btn'),\n          closeBtn = document.querySelector('.image-popup__close-btn'),\n          image = document.querySelector('.image-popup__img'),\n          authorPage = document.querySelector('.image-popup__author-link'),\n          authorLogo = document.querySelector('.image-popup__author-img'),\n          authorName = document.querySelector('.image-popup__author-name');\n\n\n    popup.classList.add('image-popup--active')\n    downloadBtn.href = item.links.html\n    image.src = item.urls.regular\n    authorPage.href = item.user.links.html\n    authorLogo.src = item.user.profile_image.medium\n    authorName.textContent = item.user.name\n\n    closeBtn.addEventListener('click', () => {\n      popup.classList.remove('image-popup--active')\n    })\n          \n  }\n\n  // Next and Prev btns\n  const prevBtn = document.querySelector('.image-popup__pre-btn'),\n        nextBtn = document.querySelector('.image-popup__next-btn');\n\n  // Change to previous image\n  prevBtn.addEventListener('click', () => {\n    if (currentImage > 0) {\n      currentImage--\n      showImagePopup(dataImages[currentImage])\n    }\n  })\n  \n  //Change to previous image\n  nextBtn.addEventListener('click', () => {\n    if (currentImage < dataImages.length) {\n      currentImage++ \n      showImagePopup(dataImages[currentImage])\n    }\n  })\n  // Fetch requset for get data\n  const getResource = async (url) => {\n    const res = await fetch(url);\n    if (!res.ok) {\n        throw new Error(`Could not fetch ${url}, status: ${res.status}`);\n    } else {\n      galleryInner.innerHTML = ''\n    }\n\n    return await res.json();\n  };\n\n  // Get random images from URL\n  const getImages = (url) => {\n    getResource(url)\n    .then(data => {\n      if (url === RANDOM_PHOTO_URL) {\n        dataImages = data\n      } else {\n        dataImages = data;\n      }\n      creatCardImages(dataImages)\n    }) \n  }\n\n  // If user doesn't search anything get random iamges\n  getImages(RANDOM_PHOTO_URL)\n\n  // When page loaded set focus search input\n  formSearch.focus()\n  \n  formSearch.addEventListener('input', () => {\n    // If user writes something on input search show reset button\n    if (formSearch.value) {\n      formResetBtn.classList.add('form__btn-reset--active')\n    } else {\n      // Else hide the reset button and get random images\n      formResetBtn.classList.remove('form__btn-reset--active')\n    }\n  })\n\n  // When user click on reset button \n  formResetBtn.addEventListener('click', () => {\n    // Remove resset button for input\n    formResetBtn.classList.remove('form__btn-reset--active')\n    // Remove popup of not-found if it open\n    if (notFoundPopup.classList.contains('gallery__not-found--active')) {\n      notFoundPopup.classList.remove('gallery__not-found--active')\n      // Then get random images\n      getImages(RANDOM_PHOTO_URL)\n    }\n    // Stay focus on search input\n    formSearch.focus()\n  })\n\n  // Save previous value of search for check if user white then value again don't get images\n  let prevSearchValue = null\n  form.addEventListener('submit', (e) => {\n    e.preventDefault()\n\n    // Get all values of form (in our case it will be only input)\n    const formData = new FormData(form);\n    // Convert the data of values to object\n    const inputValues = Object.fromEntries(formData.entries());\n    // Make URL for search request on fetch\n    const SEARH_URL = `https://api.unsplash.com/search/photos?client_id=${api_key}&query=${inputValues.search}&per_page=20`\n\n    // Get data of images when user set request in search input\n    if (inputValues.search && prevSearchValue !== inputValues.search) {\n      getResource(SEARH_URL)\n        .then(data => {\n          if (SEARH_URL === RANDOM_PHOTO_URL) {\n            dataImages = data\n          } else {\n            dataImages = data.results\n            if (data.results.length) {\n              // If data of images is not empty render cards with images\n              creatCardImages(data.results)\n            } else {\n              // If the search request return undefined show popup - sorry we don't find anything\n              notFoundPopup.classList.add('gallery__not-found--active')\n              notFoundPopup.innerHTML = `<p>Sorry, we don't found anything with the <span style='color: #ff552a;font-weight: bold;text-decoration: underline;'> ${formSearch.value}</span> request..</p>`\n            }\n          }\n          // Save search input value \n          prevSearchValue = inputValues.search\n        }) \n    }    \n  })\n\n})\n\n//# sourceURL=webpack://api-image-gallery/./index.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./index.js"]();
/******/ 	
/******/ })()
;